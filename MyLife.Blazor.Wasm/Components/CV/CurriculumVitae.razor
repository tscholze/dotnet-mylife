@using MyLife.Core.Models;
@using MyLife.Blazor.Wasm.Extensions
@using MyLife.Core.Models.CurriculumVitae

<style>
    .cv-section-title {
        font-size: 1.1rem;
        margin-bottom: 0px;
    }

    .cv-section-item {
        margin-top: 4px;
        list-style-type: '- ';
    }
</style>

<h2>Curricilum Vitae</h2>

<h3>Experiences</h3>
@foreach (var item in GetFilteredEmployments())
{
    <CVSubSection RawTitle="@GetRawTitleForEmployment(item)" RawItems="@item.Tasks" />
}

<h3>Education</h3>
@foreach (var item in Data.Educations)
{
    <CVSubSection RawTitle="@GetRawTitleForEducation(item)" RawItems="@item.Content" />
}

<h3>Skills</h3>
<CVSubSection RawTitle="Software development" RawItems="@GetDevelopmentItems(Data.Skillset)" />
<CVSubSection RawTitle="Design process" RawItems="@GetDesignItems(Data.Skillset)" />
<CVSubSection RawTitle="Soft skills" RawItems="Data.Skillset.SoftSkills" />
<CVSubSection RawTitle="Sparetime activities" RawItems="Data.Activities" />
<CVSubSection RawTitle="Other interests" RawItems="Data.OtherInterests" />

@code {
    /// <summary>
    /// The maximum number of employment entries to show
    /// </summary>
    [Parameter]
    public int MaxEmployments { get; set; } = 5;

    /// <summary>
    /// Event callback when an error occurs
    /// </summary>
    [Parameter]
    public EventCallback<Exception> OnError { get; set; }

    [Parameter]
    [EditorRequired]
    public required MyLife.Core.Models.CurriculumVitae.Container Data { get; set; }

    protected override void OnParametersSet()
    {
        if (Data == null)
        {
            throw new ArgumentNullException(nameof(Data), "CV data cannot be null");
        }

        if (!Data.RecentEmployments.Any())
        {
            Console.WriteLine("Warning: No employment history available");
        }
    }

    private async Task HandleError(Exception ex)
    {
        try
        {
            await OnError.InvokeAsync(ex);
        }
        catch
        {
            // Fallback error handling
            Console.WriteLine($"Error in CV component: {ex.Message}");
        }
    }

    private IEnumerable<Employment> GetFilteredEmployments() =>
        Data.RecentEmployments.Take(MaxEmployments);

    private string GetRawTitleForEmployment(Employment employment)
    {
        ArgumentNullException.ThrowIfNull(employment);

        string range;
        var joined = employment.GetOnlyYearJoined();
        var left = employment.GetOnlyYearLeft();

        if (left == null)
        {
            range = $"{joined} - today";
        }
        else if (left == joined)
        {
            range = $"{joined}";
        }
        else
        {
            range = $"{joined} - {left}";
        }

        return $"{employment.Role} <small>| {employment.Company} | {range}</small>";
    }

    public string GetRawTitleForEducation(Education education)
    {
        ArgumentNullException.ThrowIfNull(education, nameof(education));
        ArgumentException.ThrowIfNullOrEmpty(education.Graduation);
        ArgumentException.ThrowIfNullOrEmpty(education.Instituation);
        
        return $"{education.Graduation} | {education.Instituation} | {education.YearOfGraduation}";
    }

    public string[] GetDevelopmentItems(Skillset skillset)
    {
        ArgumentNullException.ThrowIfNull(skillset, nameof(skillset));
        ArgumentNullException.ThrowIfNull(skillset.DevelopmentEnvironments);
        ArgumentNullException.ThrowIfNull(skillset.ProgrammingLanguages);

        return [
            $"<strong>Environments:</strong> {String.Join(", ", skillset.DevelopmentEnvironments)}",
            $"<strong>Languages:</strong> {String.Join(", ", skillset.ProgrammingLanguages)}"
        ];
    }

    public string[] GetDesignItems(Skillset skillset)
    {
        ArgumentNullException.ThrowIfNull(skillset, nameof(skillset));
        ArgumentNullException.ThrowIfNull(skillset.DesignEnvironments);
        ArgumentNullException.ThrowIfNull(skillset.DesignGuidelines);

        return [
            $"<strong>Environments:</strong> {String.Join(", ", skillset.DesignEnvironments)}",
            $"<strong>Guidelines:</strong> {String.Join(", ", skillset.DesignGuidelines)}"
        ];
    }
}
