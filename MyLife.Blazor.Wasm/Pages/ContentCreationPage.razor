@page "/contentcreation"
@using MyLife.Blazor.Wasm.Components.ContentCreation
@using MyLife.Blazor.Wasm.Components.OpenSource
@using MyLife.Blazor.Wasm.Components.Shared
@using MyLife.Blazor.Wasm.Utils.Extensions
@using MyLife.Core
@using MyLife.Core.Models
@using MyLife.Core.Models.ContentCreation
@using MyLife.Core.Models.Medium
@using MyLife.Core.Models.Shared
@using MyLife.Core.Services
@using static MyLife.Blazor.Wasm.Components.Shared.ThumbnailGrid
@using static MyLife.Core.Models.ContentCreation.AccountPublications
@using MyLife.Blazor.Wasm.Extensions
@inject LifeService lifeService

<div class="contentcreation">
    <h2>Content creation</h2>

    @if (string.IsNullOrEmpty(motivation))
    {
        <div class="loading">Loading content...</div>
    }
    else
    {
        <h3>My motivation</h3>
        <p>@motivation</p>

        @if (otherFeeds.Any())
        {
            <h3>Some accounts in short</h3>
            <ul>
                @foreach (var item in otherFeeds)
                {
                    <li>
                        <AccountListItem Item="@item" />
                    </li>
                }
            </ul>
        }

        <PublicationSection Publications="@youtubeFeeds" />
        <PublicationSection Publications="@mediumFeeds" />
    }
</div>

@code {
    #region Private members

    private string motivation = string.Empty;
    private List<AccountPublications> mediumFeeds = new();
    private List<AccountPublications> youtubeFeeds = new();
    private List<AccountPublications> otherFeeds = new();

    #endregion

    #region Initialization

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading content: {ex.Message}");
            motivation = "Failed to load content. Please try again later.";
        }
    }

    private async Task LoadData()
    {
        var life = await lifeService.GetLife();
        var accountPublications = await lifeService.GetContentPublications();

        if (life?.ContentCreation == null || accountPublications == null) return;

        motivation = string.Join(' ', life.ContentCreation.MotivationParagraphs ?? Array.Empty<string>());
        mediumFeeds = accountPublications.Where(a => a?.Account?.Platform == Platform.Medium).ToList();
        youtubeFeeds = accountPublications.Where(a => a?.Account?.Platform == Platform.Youtube).ToList();
        otherFeeds = accountPublications.Except(youtubeFeeds).Except(mediumFeeds).ToList();
    }

    private string GetUsernameFromMediumUrl(Uri url)
    {
        return url.Host.ToString().Split('.').First();
    }

    #endregion

    public class MediumAccount
    {
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public required string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        public required string Url { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("thumbnails")]
        public required GridItem[] Thumbnails { get; set; }
    }
}