@page "/contentcreation"
@using MyLife.Blazor.Wasm.Components.ContentCreation
@using MyLife.Blazor.Wasm.Components.OpenSource
@using MyLife.Blazor.Wasm.Components.Shared
@using MyLife.Blazor.Wasm.Utils.Extensions
@using MyLife.Core
@using MyLife.Core.Models
@using MyLife.Core.Models.ContentCreation
@using MyLife.Core.Models.Medium
@using MyLife.Core.Models.Shared
@using MyLife.Core.Services
@using static MyLife.Blazor.Wasm.Components.Shared.ThumbnailGrid
@using static MyLife.Core.Models.ContentCreation.AccountPublications
@using MyLife.Blazor.Wasm.Extensions
@inject LifeService lifeService

<div class="contentcreation">
    <h2>Content creation</h2>

    <h3>My motivation</h3>
    <p>@motivation</p>

    <h3>Some accounts in short</h3>
    <ul>
        @foreach (var item in otherFeeds)
        {
            <li>
                <div class="contentcreation-otherfeeds-container">
                    <p><strong>@item.Account.Name</strong> on @item.Account.Platform <small>| <a target="_blank" href="@item.Account.Url" title="@item.Account.Handle" alt="@item.Account.Handle">Click</a></small><br />@item.Account.Description</p>
                </div>
            </li>
        }
    </ul>

    @foreach (var item in youtubeFeeds)
    {
        <AccountPublicationContainer Item="@item" />
    }

    @foreach (var item in mediumFeeds)
    {
        <AccountPublicationContainer Item="@item" />
    }
</div>


@code {
    #region Private member

    private string motivation = string.Empty;
    private List<AccountPublications> mediumFeeds = new();
    private List<AccountPublications> youtubeFeeds = new();
    private List<AccountPublications> otherFeeds = new();

    #endregion

    #region Init

    protected override async Task OnInitializedAsync()
    {
        var life = await lifeService.GetLife();
        var accountPublications = await lifeService.GetContentPublications();
        if (life is null || accountPublications == null || accountPublications?.Count == 0) return;

        motivation = string.Join(' ', life.ContentCreation.MotivationParagraphs);
        mediumFeeds = accountPublications?.Where(a => a.Account.Platform == Platform.Medium).ToList() ?? [];
        youtubeFeeds = accountPublications?.Where(a => a.Account.Platform == Platform.Youtube).ToList() ?? [];
        otherFeeds = accountPublications?.Except(youtubeFeeds).Except(mediumFeeds).ToList() ?? [];
    }

    private string GetUsernameFromMediumUrl(Uri url)
    {
        return url.Host.ToString().Split('.').First();
    }

    #endregion

    public class MediumAccount
    {
        public required string Name { get; set; }
        public required string Url { get; set; }
        public required GridItem[] Thumbnails { get; set; }
    }
}