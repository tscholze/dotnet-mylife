@page "/contentcreation"
@using MyLife.Blazor.Wasm.Components.OpenSource
@using MyLife.Blazor.Wasm.Components.Shared
@using MyLife.Blazor.Wasm.Utils.Extensions
@using MyLife.Core
@using MyLife.Core.Models
@using MyLife.Core.Models.Medium
@using MyLife.Core.Models.Shared
@using MyLife.Core.Services
@using static MyLife.Blazor.Wasm.Components.Shared.ThumbnailGrid
@using MyLife.Blazor.Wasm.Extensions
@inject LifeService lifeService
@inject MediumService mediumService

<div class="contentcreation">
    <h2>Content creation</h2>

    <h3>My motivation</h3>
    <p>@motivation</p>

    <h3>Youtube</h3>

    <h3>Medium feeds</h3>
    @if (mediumFeeds != null)
    {
        @foreach (var feed in mediumFeeds)
        {
            <div class="medium-account">
                <h4>@feed.Value.Title</h4>
                <ThumbnailGrid Items="@feed.Value.Articles.ToThumbnails()" />
                <hr />
            </div>
        }
    }
   else {
       <p>Currently not available.</p>
   }
</div>


@code {
    #region Private member

    private string motivation = string.Empty;
    private Dictionary<string, MediumFeedModel>? mediumFeeds;

    #endregion

    #region Init


    protected override async Task OnInitializedAsync()
    {
        var data = lifeService.GetLife().ContentCreation;
        motivation = string.Join(' ', data.MotivationParagraphs);

       var mediumAccounts = data.Accounts.Where(a => a.Platform == Platform.Medium).Select(a => GetUsernameFromMediumUrl(a.Url));
       mediumFeeds = await mediumService.GetFeedsByUsernames(mediumAccounts);

        await base.OnInitializedAsync();
    }
    
    private string GetUsernameFromMediumUrl(Uri url)
    {
        return url.Host.ToString().Split('.').First();
    }

    #endregion

    public class MediumAccount
    {
        public required string Name { get; set; }
        public required string Url { get; set; }
        public required GridItem[] Thumbnails { get; set; }
    }
}